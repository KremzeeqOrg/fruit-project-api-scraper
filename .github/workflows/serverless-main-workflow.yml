on:
  push:
    branches:
      - main
env:
  TEST_DIR: "src/tests"
  NODE_VERSION: 20
  PYTHON_VERSION: '3.10'
  SERVERLESS_VERSION: '3.38.0'
  APP: "fruit-project-api-scraper"

jobs:
  pytest:
    name: Pytest
    runs-on: ubuntu-latest
    strategy:  
      matrix:  
        test_file: ["api_mapping_manager", "record_manager", "scraper", "utils"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python version - ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies  
      run: |  
          python -m pip install --upgrade pip  
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi 
    - name: Lint with Ruff
      # see ruff.toml for config
      uses: chartboost/ruff-action@v1
      continue-on-error: true
    - name: Test with pytest
      run: pytest -vv ${{ env.TEST_DIR }}/test_${{ matrix.test_file }}.py
      

  serverless-deploy-to-dev:
    name: "Serverless Deploy to Dev"
    permissions:
      id-token: write
      contents: read
    environment: dev
    needs: [pytest]
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Set AWS context
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.FRUIT_PROJECT_DEV_AWS_ACCOUNT_ACCESS_ROLE }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: true
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: "Docker Build and push to AWS ECR"
      id: docker-push
      env:
        AWS_ECR: ${{ secrets.FRUIT_PROJECT_DEV_AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP }}
      run: |
        sha_short=$(git rev-parse --short HEAD)
        image_sha_tag=develop-${sha_short}
        echo "image_sha_tag=${image_sha_tag}" >> $GITHUB_OUTPUT
        aws_tag=${{ env.AWS_ECR }}:${image_sha_tag}
        docker_hub_tag=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP }}:latest

        docker build --platform linux/amd64 -t ${aws_tag} -t ${docker_hub_tag} .
        docker push ${aws_tag}
        docker push ${docker_hub_tag}

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: serverless deploy
      run: | 
        npm i -g serverless@${{ env.SERVERLESS_VERSION }}
        npm install && npm list -g
        tag_arg="tag=${{ steps.docker-push.outputs.image_sha_tag }}"
        serverless deploy --stage dev --param=${tag_arg}
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

  serverless-deploy-to-prod:
    name: "Serverless Deploy to Prod"
    permissions:
      id-token: write
      contents: read
    environment: prod
    #needs: pytest
    needs: [serverless-deploy-to-dev]
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Set AWS context
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.FRUIT_PROJECT_PROD_AWS_ACCOUNT_ACCESS_ROLE }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: true
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: "Docker Build and push to AWS ECR"
      id: docker-push
      env:
        AWS_ECR: ${{ secrets.FRUIT_PROJECT_PROD_AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.APP }}
        DOCKER_HUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP }}
      run: |
        docker_hub_latest_tag=${{ env.DOCKER_HUB_REPO }}:latest
        docker pull $docker_hub_latest_tag
        if [ $? -ne 0 ]; then
          echo "Docker pull failed. Image not found: ${docker_hub_latest_tag}"
          exit 1
        fi
        docker tag ${docker_hub_latest_tag} ${AWS_ECR}:latest
        docker push ${{ env.AWS_ECR }}:latest

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: serverless deploy
      run: | 
        npm i -g serverless@${{ env.SERVERLESS_VERSION }}
        npm install && npm list -g
        tag_arg="tag=latest"
        echo "tag_arg"
        echo ${tag_arg}

        serverless deploy --stage prod --param=${tag_arg}
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}