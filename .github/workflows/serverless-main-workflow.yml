on:
  push:
    branches:
      - main
env:
  TEST_DIR: "src/tests"
  NODE_VERSION: 20
  PYTHON_VERSION: '3.10'
  SERVERLESS_VERSION: 3.38.0
  APP: "fruit-project-api-scraper"


jobs:
  pytest:
    name: Pytest
    runs-on: ubuntu-latest
    strategy:  
      matrix:  
        test_file: ["api_mapping_manager", "record_manager", "scraper", "utils"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python version - ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies  
      run: |  
          python -m pip install --upgrade pip  
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi 
    - name: Lint with Ruff
      # see ruff.toml for config
      uses: chartboost/ruff-action@v1
      continue-on-error: true
    - name: Test with pytest
      run: pytest -vv ${{ env.TEST_DIR }}/test_${{ matrix.test_file }}.py
      
  serverless-deploy-to-dev:
    permissions:
      id-token: write
      contents: read
    name: "Serverless Deploy to Dev"
    needs: pytest
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Set AWS context
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: true
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: "Docker Build and push to AWS ECR"
      id: docker-push
      env:
        AWS_ECR: ${{ secrets.FRUIT_PROJECT_DEV_AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      run: |
        sha_short=$(git rev-parse --short HEAD)
        "image_sha_tag=develop-${sha_short}" >> $GITHUB_OUTPUT
        tag=${{ env.AWS_ECR }}/${image_sha_tag}

        docker build --platform linux/amd64 -t ${tag} .
        docker push ${{ env.AWS_ECR }}/${{ env.APP }} --all-tags
        id=$(docker images -q ${tag})
        latest_tag=${{ env.APP }}:latest
        docker_hub_latest_tag=${{ secrets.DOCKERHUB_USERNAME }}/${latest_tag}
        docker ${id} tag ${latest_tag $docker_hub_latest_tag}
        docker push ${docker_hub_latest_tag}

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: serverless deploy
      run: | 
        npm i -g serverless@${{ env.SERVERLESS_VERSION }}
        npm install && npm list -g
        tag_arg="tag=${{ steps.docker-push.outputs.image_sha_tag }}"
        serverless deploy --stage dev --param=${tag_arg}
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}