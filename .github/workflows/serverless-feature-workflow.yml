on:
  pull_request:
    branches:
      - main
    types: [labeled, opened, synchronize, reopened]

concurrency:
  group: feature
  cancel-in-progress: true

jobs:
  pytest:
    name: Pytest
    permissions:
      contents: read
    strategy:  
      matrix:  
        test_file: ${{ fromJson('["api_mapping_manager", "record_manager", "scraper", "utils"]') }}
    uses: KremzeeqOrg/gha-reusable-workflows/.github/workflows/pytest-unit-test-workflow.yml@main
    with:
      environment: feature
      test_file: ${{ matrix.test_file }}

  label-check:
    name: "Check Deploy Label"
    needs: [pytest]
    runs-on: ubuntu-latest
    outputs:
      can_deploy: ${{ steps.set_output.outputs.can_deploy }}
    steps:
      - uses: actions/checkout@v4
      - name: Lint with Ruff
        uses: chartboost/ruff-action@v1
        continue-on-error: true
      - id: deploy_label_check
        uses: docker://agilepathway/pull-request-label-checker:latest
        with:
          one_of: deploy
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          allow_failure: true
      - id: set_output
        run: |
          if [[ "${{ steps.deploy_label_check.outputs.label_check }}" == "success" ]]; then
            echo "can_deploy=true" >> "$GITHUB_OUTPUT"
          else
            echo "can_deploy=false" >> "$GITHUB_OUTPUT"
          fi
      
  serverless-deploy:
    name: Serverless Deploy
    needs: [ label-check ]
    permissions:
      id-token: write
      contents: read
    if: ${{ needs.label-check.outputs.can_deploy == 'true' }}
    uses: KremzeeqOrg/gha-reusable-workflows/.github/workflows/serverless-deploy-workflow.yml@main
    with:
      environment: feature
    secrets: 
      aws-region: ${{ secrets.AWS_REGION }}
      aws-iam-role: ${{ secrets.AWS_ACCOUNT_ACCESS_ROLE }}
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
      serverless-access-key: ${{ secrets.SERVERLESS_ACCESS_KEY }}

  feature-cloudformation-stack-teardown:
    needs: [label-check, serverless-deploy]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    environment: "feature"
    steps:
    - name: Set AWS context
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.FRUIT_PROJECT_DEV_AWS_ACCOUNT_ACCESS_ROLE }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: true
    - name: Wait 5 minutes
      uses: GuillaumeFalourd/wait-sleep-action@v1
      with:
        time: '5m'
    - name: Delete stack
      uses: go-to-k/delstack@v1.8.0
      with:
        stack-name: ${{ env.APP }}-feature
        region: ${{ secrets.AWS_REGION }}
    - id: set_deployment_as_inactive
      name: Set deployment status as inactive
      uses: rsotnychenko/deployment-status-update@0.2.1
      with:
        status: 'inactive'
        run_id: ${{ github.run_id }}
        environment_url: https://api.github.com/KremzeeqOrg/fruit-project-api-scraper/deployments/feature
        auto_inactive: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

